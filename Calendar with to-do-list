import tkinter as tk
from tkinter import messagebox, simpledialog
import datetime
import json
import os

class CalendarApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Kalendarz")

        self.current_date = datetime.date.today()
        self.tasks = {}  # Store tasks for each date
        self.selected_date = None
        self.selected_label = None
        self.load_tasks()

        self.create_widgets()
        self.update_calendar()

    def create_widgets(self):
        self.calendar_frame = tk.Frame(self.root)
        self.calendar_frame.pack()

        self.control_frame = tk.Frame(self.root)
        self.control_frame.pack()

        self.prev_month_button = tk.Button(self.control_frame, text="<<", command=self.prev_month)
        self.prev_month_button.grid(row=0, column=0)

        self.month_label = tk.Label(self.control_frame, text="", width=20)
        self.month_label.grid(row=0, column=1)

        self.next_month_button = tk.Button(self.control_frame, text=">>", command=self.next_month)
        self.next_month_button.grid(row=0, column=2)

        self.task_frame = tk.Frame(self.root)
        self.task_frame.pack()

        self.task_listbox = tk.Listbox(self.task_frame, width=50, height=10)
        self.task_listbox.pack(side=tk.LEFT)

        self.task_scrollbar = tk.Scrollbar(self.task_frame)
        self.task_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        self.task_listbox.config(yscrollcommand=self.task_scrollbar.set)
        self.task_scrollbar.config(command=self.task_listbox.yview)

        self.add_task_button = tk.Button(self.root, text="Add Task", command=self.add_task)
        self.add_task_button.pack()

        self.delete_task_button = tk.Button(self.root, text="Delete Task", command=self.delete_task)
        self.delete_task_button.pack()

        self.mark_done_button = tk.Button(self.root, text="Mark as Done", command=self.mark_as_done)
        self.mark_done_button.pack()

    def update_calendar(self):
        for widget in self.calendar_frame.winfo_children():
            widget.destroy()

        self.month_label.config(text=self.current_date.strftime("%B %Y"))

        days_in_month = (self.current_date.replace(day=28) + datetime.timedelta(days=4)).replace(day=1) - datetime.timedelta(days=1)
        days_in_month = days_in_month.day

        first_day_of_month = self.current_date.replace(day=1).weekday()
        current_day = 1

        for week in range(6):
            for day in range(7):
                if week == 0 and day < first_day_of_month:
                    label = tk.Label(self.calendar_frame, text="", width=5, height=2, relief="groove")
                elif current_day > days_in_month:
                    label = tk.Label(self.calendar_frame, text="", width=5, height=2, relief="groove")
                else:
                    date = self.current_date.replace(day=current_day)
                    label = tk.Label(self.calendar_frame, text=current_day, width=5, height=2, relief="groove")
                    label.bind("<Button-1>", lambda e, date=date, lbl=label: self.select_date(date, lbl))
                    current_day += 1
                label.grid(row=week, column=day)

    def select_date(self, date, label):
        if self.selected_label and self.selected_label.winfo_exists():
            self.selected_label.config(bg="SystemButtonFace")  # Reset the background color of the previously selected label

        self.selected_date = date
        self.selected_label = label
        self.selected_label.config(bg="lightblue")  # Highlight the currently selected label
        self.update_task_list()

    def update_task_list(self):
        self.task_listbox.delete(0, tk.END)
        tasks = self.tasks.get(str(self.selected_date), [])
        for task in tasks:
            self.task_listbox.insert(tk.END, task)

    def add_task(self):
        if not hasattr(self, 'selected_date'):
            messagebox.showwarning("Warning", "You must select a date first.")
            return
        task = simpledialog.askstring("Add Task", "Enter task:")
        if task:
            tasks = self.tasks.get(str(self.selected_date), [])
            tasks.append(task)
            self.tasks[str(self.selected_date)] = tasks
            self.update_task_list()
            self.save_tasks()

    def delete_task(self):
        selected_task_index = self.task_listbox.curselection()
        if selected_task_index and hasattr(self, 'selected_date'):
            tasks = self.tasks.get(str(self.selected_date), [])
            tasks.pop(selected_task_index[0])
            self.tasks[str(self.selected_date)] = tasks
            self.update_task_list()
            self.save_tasks()
        else:
            messagebox.showwarning("Warning", "You must select a task to delete.")

    def mark_as_done(self):
        selected_task_index = self.task_listbox.curselection()
        if selected_task_index and hasattr(self, 'selected_date'):
            tasks = self.tasks.get(str(self.selected_date), [])
            task = tasks[selected_task_index[0]]
            tasks[selected_task_index[0]] = f"{task} (Done)"
            self.tasks[str(self.selected_date)] = tasks
            self.update_task_list()
            self.save_tasks()
        else:
            messagebox.showwarning("Warning", "You must select a task to mark as done.")

    def prev_month(self):
        first_day_of_current_month = self.current_date.replace(day=1)
        last_day_of_prev_month = first_day_of_current_month - datetime.timedelta(days=1)
        self.current_date = last_day_of_prev_month
        self.update_calendar()

    def next_month(self):
        days_in_current_month = (self.current_date.replace(day=28) + datetime.timedelta(days=4)).replace(day=1) - datetime.timedelta(days=1)
        first_day_of_next_month = self.current_date.replace(day=1) + datetime.timedelta(days=days_in_current_month.day + 1)
        self.current_date = first_day_of_next_month
        self.update_calendar()

    def save_tasks(self):
        with open("tasks.json", "w") as file:
            json.dump(self.tasks, file)

    def load_tasks(self):
        if os.path.exists("tasks.json"):
            with open("tasks.json", "r") as file:
                self.tasks = json.load(file)
        else:
            self.tasks = {}

if __name__ == "__main__":
    root = tk.Tk()
    app = CalendarApp(root)
    root.mainloop()
